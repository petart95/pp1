
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 19 08:14:55 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java.util.Stack;
import java_cup.runtime.*;
import org.apache.log4j.*;
import org.apache.log4j.xml.DOMConfigurator;
import rs.ac.bg.etf.pp1.util.Log4JUtils;
import java.io.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 19 08:14:55 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\106\002\000\002\002\013\000\002\002" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\002" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\005\004\000\002\005\002\000\002\006\002\000\002" +
    "\007\002\000\002\011\006\000\002\011\005\000\002\016" +
    "\005\000\002\016\003\000\002\017\005\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\012\005\000" +
    "\002\012\005\000\002\021\005\000\002\021\003\000\002" +
    "\022\003\000\002\022\005\000\002\013\007\000\002\023" +
    "\005\000\002\023\007\000\002\027\003\000\002\026\003" +
    "\000\002\026\003\000\002\024\003\000\002\024\006\000" +
    "\002\030\004\000\002\030\002\000\002\107\002\000\002" +
    "\025\004\000\002\014\005\000\002\031\003\000\002\031" +
    "\002\000\002\032\003\000\002\032\003\000\002\110\002" +
    "\000\002\111\002\000\002\112\002\000\002\033\017\000" +
    "\002\034\003\000\002\035\003\000\002\035\002\000\002" +
    "\035\005\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\004\000\002\037\002\000\002\040\005" +
    "\000\002\040\003\000\002\042\004\000\002\042\006\000" +
    "\002\015\003\000\002\041\004\000\002\041\004\000\002" +
    "\043\010\000\002\043\013\000\002\113\002\000\002\043" +
    "\022\000\002\044\013\000\002\114\002\000\002\044\022" +
    "\000\002\044\004\000\002\044\004\000\002\044\004\000" +
    "\002\044\004\000\002\044\005\000\002\044\007\000\002" +
    "\044\007\000\002\044\011\000\002\044\010\000\002\044" +
    "\004\000\002\047\002\000\002\050\002\000\002\045\002" +
    "\000\002\056\002\000\002\053\002\000\002\115\002\000" +
    "\002\052\004\000\002\057\002\000\002\051\004\000\002" +
    "\116\002\000\002\046\006\000\002\046\004\000\002\046" +
    "\004\000\002\046\003\000\002\046\002\000\002\062\006" +
    "\000\002\063\002\000\002\064\004\000\002\064\005\000" +
    "\002\065\002\000\002\066\005\000\002\066\003\000\002" +
    "\060\005\000\002\060\003\000\002\067\003\000\002\070" +
    "\005\000\002\070\003\000\002\071\003\000\002\071\005" +
    "\000\002\055\003\000\002\055\004\000\002\073\007\000" +
    "\002\073\003\000\002\076\002\000\002\077\002\000\002" +
    "\075\007\000\002\075\003\000\002\101\003\000\002\101" +
    "\005\000\002\101\007\000\002\101\004\000\002\101\003" +
    "\000\002\101\003\000\002\117\002\000\002\054\007\000" +
    "\002\054\005\000\002\054\003\000\002\054\006\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\074\003\000" +
    "\002\074\003\000\002\104\003\000\002\104\003\000\002" +
    "\102\003\000\002\102\003\000\002\100\003\000\002\100" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\004\005\001\002\000\004\002\u0102\001" +
    "\002\000\004\061\006\001\002\000\012\005\ufffe\006\ufffe" +
    "\050\ufffe\061\ufffe\001\002\000\012\005\ufff6\006\ufff6\050" +
    "\ufff6\061\ufff6\001\002\000\012\005\ufffc\006\ufffc\050\ufffc" +
    "\061\ufffc\001\002\000\012\005\023\006\022\050\014\061" +
    "\015\001\002\000\006\003\370\061\371\001\002\000\012" +
    "\005\ufffd\006\ufffd\050\ufffd\061\ufffd\001\002\000\012\011" +
    "\ufff7\013\ufff7\051\ufff7\061\ufff7\001\002\000\064\003\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\052\uffc4\053" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\061\uffc4\001\002\000\004" +
    "\050\052\001\002\000\012\005\ufffa\006\ufffa\050\ufffa\061" +
    "\ufffa\001\002\000\012\005\ufff9\006\ufff9\050\ufff9\061\ufff9" +
    "\001\002\000\012\005\ufffb\006\ufffb\050\ufffb\061\ufffb\001" +
    "\002\000\004\061\043\001\002\000\006\003\025\061\015" +
    "\001\002\000\004\061\030\001\002\000\004\056\026\001" +
    "\002\000\012\005\ufff3\006\ufff3\050\ufff3\061\ufff3\001\002" +
    "\000\006\056\ufff1\057\ufff1\001\002\000\004\023\035\001" +
    "\002\000\006\056\033\057\032\001\002\000\004\061\030" +
    "\001\002\000\012\005\ufff4\006\ufff4\050\ufff4\061\ufff4\001" +
    "\002\000\006\056\ufff2\057\ufff2\001\002\000\010\062\036" +
    "\063\041\064\040\001\002\000\056\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\047\uffef\053\uffef\055\uffef\056\uffef\057\uffef" +
    "\001\002\000\006\056\ufff0\057\ufff0\001\002\000\056\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\047\uffed\053\uffed\055\uffed" +
    "\056\uffed\057\uffed\001\002\000\056\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\047\uffee\053\uffee\055\uffee\056\uffee\057\uffee" +
    "\001\002\000\006\007\044\050\ufff6\001\002\000\006\007" +
    "\uffe3\050\uffe3\001\002\000\006\003\046\061\047\001\002" +
    "\000\004\050\uffe5\001\002\000\004\050\uffe1\001\002\000" +
    "\004\050\uffe2\001\002\000\004\050\ufff6\001\002\000\004" +
    "\050\uffe4\001\002\000\010\050\uffdd\051\uffdd\061\uffdd\001" +
    "\002\000\004\051\360\001\002\000\010\050\055\051\uffe0" +
    "\061\015\001\002\000\012\011\ufff7\013\ufff7\051\ufff7\061" +
    "\ufff7\001\002\000\010\050\uffde\051\uffde\061\uffde\001\002" +
    "\000\012\011\uffd8\013\060\051\061\061\uffd8\001\002\000" +
    "\006\011\uffd9\061\uffd9\001\002\000\004\051\uffdf\001\002" +
    "\000\006\011\066\061\015\001\002\000\012\011\ufff8\013" +
    "\ufff8\051\ufff8\061\ufff8\001\002\000\004\061\070\001\002" +
    "\000\004\061\uffd7\001\002\000\004\061\uffd6\001\002\000" +
    "\012\011\uffda\013\uffda\051\uffda\061\uffda\001\002\000\004" +
    "\054\uffd1\001\002\000\004\054\ufff6\001\002\000\004\054" +
    "\uffd5\001\002\000\004\054\074\001\002\000\010\003\076" +
    "\055\uffcf\061\015\001\002\000\004\061\355\001\002\000" +
    "\006\055\uffcd\057\353\001\002\000\006\055\uffd0\057\351" +
    "\001\002\000\006\055\uffc7\057\uffc7\001\002\000\004\055" +
    "\102\001\002\000\010\003\104\050\uffdd\061\uffdd\001\002" +
    "\000\006\050\uffcc\061\015\001\002\000\004\050\uffcb\001" +
    "\002\000\004\050\uffd4\001\002\000\004\050\107\001\002" +
    "\000\032\003\uffc9\010\uffc9\014\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\050\uffc9\051\uffc9\056\uffc9\061\uffc9" +
    "\001\002\000\032\003\124\010\127\014\117\016\113\017" +
    "\131\020\126\021\125\022\111\050\ufff6\051\130\056\uffa2" +
    "\061\112\001\002\000\004\054\345\001\002\000\072\023" +
    "\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82" +
    "\047\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057" +
    "\uff82\060\uff82\001\002\000\004\054\322\001\002\000\030" +
    "\023\315\024\160\025\154\026\173\027\170\030\171\033" +
    "\316\034\317\052\201\054\uffa0\060\202\001\002\000\004" +
    "\050\305\001\002\000\032\003\uffae\010\uffae\014\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\050\uffae\051\uffae" +
    "\056\uffae\061\uffae\001\002\000\004\054\244\001\002\000" +
    "\006\055\uffa3\056\uffa3\001\002\000\004\056\243\001\002" +
    "\000\032\003\uffae\010\uffae\014\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\022\uffae\050\uffae\051\uffae\056\uffae\061\uffae" +
    "\001\002\000\032\003\uffca\010\uffca\014\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\050\uffca\051\uffca\056\uffca" +
    "\061\uffca\001\002\000\004\056\241\001\002\000\004\054" +
    "\231\001\002\000\004\056\230\001\002\000\022\012\137" +
    "\032\135\054\147\056\142\061\112\062\036\063\041\064" +
    "\040\001\002\000\012\011\uffd3\013\uffd3\051\uffd3\061\uffd3" +
    "\001\002\000\004\056\132\001\002\000\034\003\uffb9\010" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\050\uffb9\051\uffb9\056\uffb9\061\uffb9\001\002\000" +
    "\012\011\ufff5\013\ufff5\051\ufff5\061\ufff5\001\002\000\012" +
    "\011\uffd2\013\uffd2\051\uffd2\061\uffd2\001\002\000\016\012" +
    "\137\054\147\061\112\062\036\063\041\064\040\001\002" +
    "\000\056\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\053" +
    "\uff8b\055\uff8b\056\uff8b\057\uff8b\001\002\000\004\061\015" +
    "\001\002\000\004\056\222\001\002\000\064\024\uff86\025" +
    "\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\035\uff86" +
    "\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\045\uff86\046\uff86\047\uff86\052\201\053\uff86\054\uffa0" +
    "\055\uff86\056\uff86\057\uff86\060\202\001\002\000\034\003" +
    "\uffb7\010\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\050\uffb7\051\uffb7\056\uffb7\061\uffb7\001" +
    "\002\000\056\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87" +
    "\031\uff87\032\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041" +
    "\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87" +
    "\053\uff87\055\uff87\056\uff87\057\uff87\001\002\000\056\024" +
    "\uff90\025\uff90\026\uff8f\027\uff8f\030\uff8f\031\uff90\032\uff90" +
    "\035\uff8f\036\uff8f\037\uff8f\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\044\uff90\045\uff90\046\uff90\047\uff90\053\uff90\055\uff90" +
    "\056\uff90\057\uff90\001\002\000\056\024\uff8c\025\uff8c\026" +
    "\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\035\uff8c\036\uff8c" +
    "\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\047\uff8c\053\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\001\002\000\042\024\uff8f\025\uff8f\031\uff8f\032\uff8f\040" +
    "\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\047\uff93\053\uff93\055\uff93\056\uff93\057\uff93\001\002\000" +
    "\020\012\137\032\135\054\147\061\112\062\036\063\041" +
    "\064\040\001\002\000\004\055\151\001\002\000\056\024" +
    "\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\053\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\001\002\000\012\024\uff8e\025\uff8e\031" +
    "\uff8e\032\uff8e\001\002\000\012\024\160\025\154\031\155" +
    "\032\156\001\002\000\020\012\uff72\032\uff72\054\uff72\061" +
    "\uff72\062\uff72\063\uff72\064\uff72\001\002\000\016\012\uff75" +
    "\054\uff75\061\uff75\062\uff75\063\uff75\064\uff75\001\002\000" +
    "\016\012\uff74\054\uff74\061\uff74\062\uff74\063\uff74\064\uff74" +
    "\001\002\000\016\012\uff76\054\uff76\061\uff76\062\uff76\063" +
    "\uff76\064\uff76\001\002\000\020\012\uff73\032\uff73\054\uff73" +
    "\061\uff73\062\uff73\063\uff73\064\uff73\001\002\000\016\012" +
    "\137\054\147\061\112\062\036\063\041\064\040\001\002" +
    "\000\016\012\uff77\054\uff77\061\uff77\062\uff77\063\uff77\064" +
    "\uff77\001\002\000\056\024\uff91\025\uff91\026\uff8f\027\uff8f" +
    "\030\uff8f\031\uff91\032\uff91\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91" +
    "\047\uff91\053\uff91\055\uff91\056\uff91\057\uff91\001\002\000" +
    "\016\026\uff8e\027\uff8e\030\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\001\002\000\016\026\173\027\170\030\171\035\176\036" +
    "\172\037\167\001\002\000\016\012\uff70\054\uff70\061\uff70" +
    "\062\uff70\063\uff70\064\uff70\001\002\000\016\012\uff6d\054" +
    "\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d\001\002\000\020" +
    "\012\uff6b\032\uff6b\054\uff6b\061\uff6b\062\uff6b\063\uff6b\064" +
    "\uff6b\001\002\000\020\012\uff6a\032\uff6a\054\uff6a\061\uff6a" +
    "\062\uff6a\063\uff6a\064\uff6a\001\002\000\016\012\uff6e\054" +
    "\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\001\002\000\020" +
    "\012\uff6c\032\uff6c\054\uff6c\061\uff6c\062\uff6c\063\uff6c\064" +
    "\uff6c\001\002\000\016\012\137\054\147\061\112\062\036" +
    "\063\041\064\040\001\002\000\016\012\uff71\054\uff71\061" +
    "\uff71\062\uff71\063\uff71\064\uff71\001\002\000\016\012\uff6f" +
    "\054\uff6f\061\uff6f\062\uff6f\063\uff6f\064\uff6f\001\002\000" +
    "\056\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\053\uff8d" +
    "\055\uff8d\056\uff8d\057\uff8d\001\002\000\004\054\212\001" +
    "\002\000\022\003\204\012\uff85\032\uff85\054\uff85\061\uff85" +
    "\062\uff85\063\uff85\064\uff85\001\002\000\004\061\203\001" +
    "\002\000\072\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036" +
    "\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83" +
    "\045\uff83\046\uff83\047\uff83\052\uff83\053\uff83\054\uff83\055" +
    "\uff83\056\uff83\057\uff83\060\uff83\001\002\000\004\053\210" +
    "\001\002\000\020\012\137\032\135\054\147\061\112\062" +
    "\036\063\041\064\040\001\002\000\004\053\207\001\002" +
    "\000\072\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030" +
    "\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045" +
    "\uff84\046\uff84\047\uff84\052\uff84\053\uff84\054\uff84\055\uff84" +
    "\056\uff84\057\uff84\060\uff84\001\002\000\072\023\uff81\024" +
    "\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041" +
    "\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81" +
    "\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060" +
    "\uff81\001\002\000\056\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\032\uff9d\035\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d\001\002\000" +
    "\022\012\137\032\135\054\147\055\215\061\112\062\036" +
    "\063\041\064\040\001\002\000\004\055\220\001\002\000" +
    "\006\055\uff9b\057\216\001\002\000\056\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\053\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\001\002\000\020\012\137\032\135\054\147\061\112" +
    "\062\036\063\041\064\040\001\002\000\004\055\uff9c\001" +
    "\002\000\056\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\053\uff9e\055\uff9e\056\uff9e\057\uff9e\001\002\000\056\024" +
    "\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\053\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\001\002\000\034\003\uffb6\010\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\050\uffb6\051\uffb6\056\uffb6\061\uffb6\001\002\000\060\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\047\uff88\052\224\053\uff88" +
    "\055\uff88\056\uff88\057\uff88\001\002\000\020\012\137\032" +
    "\135\054\147\061\112\062\036\063\041\064\040\001\002" +
    "\000\004\053\226\001\002\000\056\024\uff89\025\uff89\026" +
    "\uff89\027\uff89\030\uff89\031\uff89\032\uff89\035\uff89\036\uff89" +
    "\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\053\uff89\055\uff89\056\uff89\057\uff89" +
    "\001\002\000\042\024\uff8f\025\uff8f\031\uff8f\032\uff8f\040" +
    "\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92" +
    "\047\uff92\053\uff92\055\uff92\056\uff92\057\uff92\001\002\000" +
    "\034\003\uffb8\010\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\050\uffb8\051\uffb8\056\uffb8\061" +
    "\uffb8\001\002\000\020\012\137\032\135\054\147\061\112" +
    "\062\036\063\041\064\040\001\002\000\006\055\234\057" +
    "\233\001\002\000\004\062\236\001\002\000\004\056\235" +
    "\001\002\000\034\003\uffb4\010\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\050\uffb4\051\uffb4" +
    "\056\uffb4\061\uffb4\001\002\000\004\055\237\001\002\000" +
    "\004\056\240\001\002\000\034\003\uffb3\010\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\050" +
    "\uffb3\051\uffb3\056\uffb3\061\uffb3\001\002\000\034\003\uffb1" +
    "\010\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\050\uffb1\051\uffb1\056\uffb1\061\uffb1\001\002" +
    "\000\032\003\uffc3\010\uffc3\014\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\050\uffc3\051\uffc3\056\uffc3\061\uffc3" +
    "\001\002\000\034\003\uffba\010\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\050\uffba\051\uffba" +
    "\056\uffba\061\uffba\001\002\000\020\012\137\032\135\054" +
    "\147\061\112\062\036\063\041\064\040\001\002\000\012" +
    "\040\uff96\041\uff96\055\uff96\056\uff96\001\002\000\026\040" +
    "\uff95\041\uff95\042\275\043\301\044\300\045\302\046\276" +
    "\047\277\055\uff95\056\uff95\001\002\000\004\055\260\001" +
    "\002\000\010\041\uff99\055\uff99\056\uff99\001\002\000\012" +
    "\040\256\041\uff98\055\uff98\056\uff98\001\002\000\010\041" +
    "\253\055\uffa9\056\uffa9\001\002\000\020\012\137\032\135" +
    "\054\147\061\112\062\036\063\041\064\040\001\002\000" +
    "\006\055\uffa8\056\uffa8\001\002\000\010\041\uff9a\055\uff9a" +
    "\056\uff9a\001\002\000\020\012\137\032\135\054\147\061" +
    "\112\062\036\063\041\064\040\001\002\000\012\040\uff97" +
    "\041\uff97\055\uff97\056\uff97\001\002\000\030\003\124\010" +
    "\127\014\117\016\113\017\131\020\126\021\125\022\111" +
    "\050\ufff6\056\uffa2\061\112\001\002\000\034\003\uffae\010" +
    "\uffae\014\uffae\015\uffab\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\050\uffae\051\uffae\056\uffae\061\uffae\001\002\000" +
    "\032\003\uffac\010\uffac\014\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\050\uffac\051\uffac\056\uffac\061\uffac\001" +
    "\002\000\032\003\uffc1\010\uffc1\014\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\050\uffc1\051\uffc1\056\uffc1\061" +
    "\uffc1\001\002\000\032\003\uffc2\010\uffc2\014\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\050\uffc2\051\uffc2\056" +
    "\uffc2\061\uffc2\001\002\000\004\015\270\001\002\000\004" +
    "\015\uffa9\001\002\000\004\015\uffaa\001\002\000\030\003" +
    "\124\010\127\014\117\016\113\017\131\020\126\021\125" +
    "\022\111\050\ufff6\056\uffa2\061\112\001\002\000\034\003" +
    "\uffac\010\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\050\uffac\051\uffac\056\uffac\061\uffac\001" +
    "\002\000\032\003\uffac\010\uffac\014\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\050\uffac\051\uffac\056\uffac\061" +
    "\uffac\001\002\000\032\003\uffc0\010\uffc0\014\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\050\uffc0\051\uffc0\056" +
    "\uffc0\061\uffc0\001\002\000\034\003\uffbd\010\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\050" +
    "\uffbd\051\uffbd\056\uffbd\061\uffbd\001\002\000\020\012\uff7d" +
    "\032\uff7d\054\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\001" +
    "\002\000\020\012\uff79\032\uff79\054\uff79\061\uff79\062\uff79" +
    "\063\uff79\064\uff79\001\002\000\020\012\uff78\032\uff78\054" +
    "\uff78\061\uff78\062\uff78\063\uff78\064\uff78\001\002\000\020" +
    "\012\uff7b\032\uff7b\054\uff7b\061\uff7b\062\uff7b\063\uff7b\064" +
    "\uff7b\001\002\000\020\012\uff7c\032\uff7c\054\uff7c\061\uff7c" +
    "\062\uff7c\063\uff7c\064\uff7c\001\002\000\020\012\uff7a\032" +
    "\uff7a\054\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a\001\002" +
    "\000\020\012\137\032\135\054\147\061\112\062\036\063" +
    "\041\064\040\001\002\000\012\040\uff94\041\uff94\055\uff94" +
    "\056\uff94\001\002\000\032\003\uffc9\010\uffc9\014\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\050\uffc9\051\uffc9" +
    "\056\uffc9\061\uffc9\001\002\000\032\003\124\010\127\014" +
    "\117\016\113\017\131\020\126\021\125\022\111\050\ufff6" +
    "\051\ufff5\056\uffa2\061\112\001\002\000\004\051\310\001" +
    "\002\000\034\003\uffad\010\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\050\uffad\051\uffad\056" +
    "\uffad\061\uffad\001\002\000\034\003\uffb2\010\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\050" +
    "\uffb2\051\uffb2\056\uffb2\061\uffb2\001\002\000\020\012\uff7e" +
    "\032\uff7e\054\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\001" +
    "\002\000\020\012\uff7f\032\uff7f\054\uff7f\061\uff7f\062\uff7f" +
    "\063\uff7f\064\uff7f\001\002\000\020\012\uffa7\032\uffa7\054" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002\000\020" +
    "\012\uff80\032\uff80\054\uff80\061\uff80\062\uff80\063\uff80\064" +
    "\uff80\001\002\000\006\055\uffa5\056\uffa5\001\002\000\006" +
    "\055\uffa4\056\uffa4\001\002\000\020\012\137\032\135\054" +
    "\147\061\112\062\036\063\041\064\040\001\002\000\006" +
    "\055\uffa6\056\uffa6\001\002\000\006\056\uffa2\061\112\001" +
    "\002\000\004\056\324\001\002\000\020\012\uffb0\032\uffb0" +
    "\054\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\001\002\000" +
    "\020\012\137\032\135\054\147\061\112\062\036\063\041" +
    "\064\040\001\002\000\004\056\uffaf\001\002\000\004\056" +
    "\330\001\002\000\006\055\uffb0\061\uffb0\001\002\000\006" +
    "\055\uffa2\061\112\001\002\000\004\055\333\001\002\000" +
    "\030\003\uffb0\010\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\050\uffb0\056\uffb0\061\uffb0\001\002\000" +
    "\030\003\124\010\127\014\117\016\113\017\131\020\126" +
    "\021\125\022\111\050\ufff6\056\uffa2\061\112\001\002\000" +
    "\034\003\uffb0\010\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\050\uffb0\051\uffb0\056\uffb0\061" +
    "\uffb0\001\002\000\032\003\uffb0\010\uffb0\014\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\050\uffb0\051\uffb0\056" +
    "\uffb0\061\uffb0\001\002\000\032\003\uffbf\010\uffbf\014\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\050\uffbf\051" +
    "\uffbf\056\uffbf\061\uffbf\001\002\000\032\003\uffac\010\uffac" +
    "\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\050" +
    "\uffac\051\uffac\056\uffac\061\uffac\001\002\000\032\003\uffbe" +
    "\010\uffbe\014\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\050\uffbe\051\uffbe\056\uffbe\061\uffbe\001\002\000\034" +
    "\003\uffbc\010\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\050\uffbc\051\uffbc\056\uffbc\061\uffbc" +
    "\001\002\000\034\003\uffac\010\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\050\uffac\051\uffac" +
    "\056\uffac\061\uffac\001\002\000\034\003\uffbb\010\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\050\uffbb\051\uffbb\056\uffbb\061\uffbb\001\002\000\004\061" +
    "\112\001\002\000\010\052\201\055\347\060\202\001\002" +
    "\000\004\056\350\001\002\000\034\003\uffb5\010\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\050\uffb5\051\uffb5\056\uffb5\061\uffb5\001\002\000\004\061" +
    "\015\001\002\000\006\055\uffc8\057\uffc8\001\002\000\004" +
    "\061\015\001\002\000\006\055\uffce\057\351\001\002\000" +
    "\010\052\356\055\uffc6\057\uffc6\001\002\000\004\053\357" +
    "\001\002\000\006\055\uffc5\057\uffc5\001\002\000\012\005" +
    "\uffdc\006\uffdc\050\uffdc\061\uffdc\001\002\000\012\005\ufff5" +
    "\006\ufff5\050\ufff5\061\ufff5\001\002\000\012\005\uffe6\006" +
    "\uffe6\050\uffe6\061\uffe6\001\002\000\012\005\uffdb\006\uffdb" +
    "\050\uffdb\061\uffdb\001\002\000\012\011\uffd8\013\060\051" +
    "\001\061\uffd8\001\002\000\004\051\366\001\002\000\004" +
    "\002\ufff5\001\002\000\004\002\000\001\002\000\004\056" +
    "\u0101\001\002\000\010\052\377\056\uffe8\057\uffe8\001\002" +
    "\000\006\056\375\057\374\001\002\000\006\056\uffe9\057" +
    "\uffe9\001\002\000\004\061\371\001\002\000\014\005\uffec" +
    "\006\uffec\050\uffec\051\uffec\061\uffec\001\002\000\006\056" +
    "\uffea\057\uffea\001\002\000\004\053\u0100\001\002\000\006" +
    "\056\uffe7\057\uffe7\001\002\000\014\005\uffeb\006\uffeb\050" +
    "\uffeb\051\uffeb\061\uffeb\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\004\006\007" +
    "\001\001\000\004\004\010\001\001\000\016\010\012\011" +
    "\020\012\016\013\017\015\011\023\015\001\001\000\006" +
    "\021\371\022\372\001\001\000\002\001\001\000\004\005" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\041\001\001\000\004\015\023\001\001\000\006\016\030" +
    "\017\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\044\001" +
    "\001\000\002\001\001\000\004\026\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\050\001\001\000\002\001\001\000\006\024\052\030\053" +
    "\001\001\000\002\001\001\000\006\012\055\015\011\001" +
    "\001\000\004\005\056\001\001\000\002\001\001\000\006" +
    "\014\062\031\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\064\032\063\001\001\000\002\001\001" +
    "\000\006\033\066\034\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\071\001\001\000\004\110\072\001\001\000\002\001" +
    "\001\000\012\015\074\035\100\040\076\042\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\102\036\104" +
    "\001\001\000\006\012\055\015\011\001\001\000\002\001" +
    "\001\000\004\111\105\001\001\000\002\001\001\000\004" +
    "\037\107\001\001\000\020\006\114\041\122\043\121\044" +
    "\115\046\120\054\113\062\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\061\313\063" +
    "\177\102\312\103\311\001\001\000\002\001\001\000\004" +
    "\045\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\020\135\054\140\055\137\062\142\073\145\075\143" +
    "\101\144\001\001\000\004\112\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\133\001\001\000\002" +
    "\001\001\000\016\020\135\054\140\062\142\073\226\075" +
    "\143\101\144\001\001\000\002\001\001\000\004\015\222" +
    "\001\001\000\002\001\001\000\004\063\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\163\001\001" +
    "\000\002\001\001\000\004\076\151\001\001\000\020\020" +
    "\135\054\140\055\147\062\142\073\145\075\143\101\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\152\001\001\000\010\074\160\102\156\104\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\135\054\140" +
    "\062\142\075\162\101\144\001\001\000\002\001\001\000" +
    "\004\076\163\001\001\000\004\077\164\001\001\000\010" +
    "\100\173\103\165\105\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\135\054\140\062" +
    "\142\101\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\210\001\001\000\004\117" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\135\054\140\055\205\062\142\073" +
    "\145\075\143\101\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\220\001\001\000" +
    "\022\020\135\054\140\055\213\062\142\066\212\073\145" +
    "\075\143\101\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\135\054\140\055\213" +
    "\062\142\066\216\073\145\075\143\101\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\135\054\140\055" +
    "\224\062\142\073\145\075\143\101\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\151\001\001\000" +
    "\002\001\001\000\020\020\135\054\140\055\231\062\142" +
    "\073\145\075\143\101\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\020\135" +
    "\051\246\054\140\055\245\060\251\062\142\067\247\070" +
    "\250\071\244\073\145\075\143\101\144\001\001\000\002" +
    "\001\001\000\004\072\302\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\253\001\001" +
    "\000\026\020\135\054\140\055\245\062\142\067\254\070" +
    "\250\071\244\073\145\075\143\101\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\020\135\054\140\055" +
    "\245\062\142\071\256\073\145\075\143\101\144\001\001" +
    "\000\002\001\001\000\020\006\114\041\261\043\121\044" +
    "\260\046\120\054\113\062\117\001\001\000\010\045\263" +
    "\052\264\115\265\001\001\000\004\053\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\266\001\001\000\002\001\001\000\016\006\114\043" +
    "\271\044\270\046\120\054\113\062\117\001\001\000\004" +
    "\053\273\001\001\000\004\053\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\135\054\140\055\303\062\142" +
    "\073\145\075\143\101\144\001\001\000\002\001\001\000" +
    "\004\037\305\001\001\000\022\006\114\007\306\041\122" +
    "\043\121\044\115\046\120\054\113\062\117\001\001\000" +
    "\002\001\001\000\004\056\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\020\135\054\140\055\320\062\142\073\145\075" +
    "\143\101\144\001\001\000\002\001\001\000\010\046\322" +
    "\054\113\062\117\001\001\000\002\001\001\000\004\047" +
    "\324\001\001\000\032\020\135\051\325\054\140\055\245" +
    "\060\251\062\142\067\247\070\250\071\244\073\145\075" +
    "\143\101\144\001\001\000\004\050\326\001\001\000\002" +
    "\001\001\000\004\047\330\001\001\000\010\046\331\054" +
    "\113\062\117\001\001\000\002\001\001\000\004\047\333" +
    "\001\001\000\016\006\114\043\335\044\334\046\120\054" +
    "\113\062\117\001\001\000\004\047\341\001\001\000\004" +
    "\047\336\001\001\000\004\113\337\001\001\000\004\053" +
    "\340\001\001\000\002\001\001\000\004\114\342\001\001" +
    "\000\004\053\343\001\001\000\002\001\001\000\004\054" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\074\042\351\001\001\000\002\001" +
    "\001\000\010\015\074\040\353\042\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\361\107\360\001\001\000\004\007\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\062\031\061\106\364\001\001\000\002\001\001\000\004" +
    "\007\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


	Tab.init(); // Universe scope
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", CUP$MJParser$actions.stringType));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	/*static {
		DOMConfigurator.configure(Log4JUtils.instance().findLoggerConfigFile());
		Log4JUtils.instance().prepareLogFile(Logger.getRootLogger());
	}
	
	public static void main(String[] args) throws Exception {
		
		Logger log = Logger.getLogger(MJParser.class);
		
		Reader br = null;
		try {
			if (args.length < 2) {
				log.error("Not enough arguments supplied! Usage: MJParser <source-file> <obj-file> ");
				return;
			}
			File sourceCode = new File(args[0]);
			if (!sourceCode.exists()) {
				log.error("Source file [" + sourceCode.getAbsolutePath() + "] not found!");
				return;
			}
				
			log.info("Compiling source file: " + sourceCode.getAbsolutePath());
			
			br = new BufferedReader(new FileReader(sourceCode));
			Yylex lexer = new Yylex(br);
			
			MJParser p = new MJParser(lexer);
	        Symbol s = p.parse();  //pocetak parsiranja
	        
	        Tab.find("").equals("");
	        Tab.dump();
	        
	        if (!p.errorDetected) {
	        	File objFile = new File(args[1]);
	        	log.info("Generating bytecode file: " + objFile.getAbsolutePath());
	        	if (objFile.exists())
	        		objFile.delete();
	        	Code.write(new FileOutputStream(objFile));
	        	
	        	log.info("Parsiranje uspesno zavrseno!");
	        }
	        else {
	        	log.error("Parsiranje NIJE uspesno zavrseno!");
	        }
	        
		} 
		finally {
			if (br != null) try { br.close(); } catch (IOException e1) { log.error(e1.getMessage(), e1); }
		}

	}*/
	
	int printCallCount = 0;
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
	
	// slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


							   
	Logger log = Logger.getLogger(getClass());
	
	public static final int String = 5;
 	public static final int Bool = 6;
		
  	public static final Struct stringType = new Struct(String),
   		         			   boolType = new Struct(Bool);
	  
	
	Struct currentType, currentMethType;
	
	Boolean main = false;
	Boolean inside_class = false, inside_meth = false;
	Boolean void_meth = false;
	
	int mainStatements = 0, mainMethodCalls = 0, StatementBlocks = 0, objCreations = 0, superUsed = 0;
	int insideFunc = 0, outsideFunc = 0;
	
	Obj _this; // this u klasi koja se obradjuje
 	Obj currentClass;
	Obj this_par;
	
	int tmpVarAdr = 999;
	int VTablePC = 1000;
	
	boolean v_call = false;
	
	int codeForEqual = 1000;
	
	boolean isExpresionOperandDesignator = false;
	Obj expresionOperand;

	Stack<Integer> fixup_and = new Stack<Integer>();	 
	Stack<Integer> fixup_or = new Stack<Integer>();	 
	Stack<Integer> fixup_adr = new Stack<Integer>();

	int fixup_for; 	 	 
	int continuePosition;
	boolean insideFor = false;
	
	void report_error(String message) {
    	parser.errorDetected = true;
        log.error(message);
    }
    
    public static void put (int x)  {
			buf[pc++] = (byte)x;
	}
	
	public static byte[] buf = new byte[8192];
	
	public static int pc = 0;
	
  	public static void put2 (int x) { put(x>>8); put(x);  }
  	public static void put4 (int x) { put2(x>>16); put2(x); }
  	
  	public static void loadConst (int n) {
    if (0<=n&&n<=5) put (Code.const_n+n);
    else if (n==-1) put (Code.const_m1);
    else  { put (Code.const_); put4 (n); }
  }

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // MulopRight ::= MOD_EQUAL 
            {
              Integer RESULT =null;
		 
		RESULT = Code.rem + codeForEqual;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // MulopRight ::= DIV_EQUAL 
            {
              Integer RESULT =null;
		
		RESULT = Code.div + codeForEqual;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // MulopRight ::= MUL_EQUAL 
            {
              Integer RESULT =null;
		 
		RESULT = Code.mul + codeForEqual;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		 
		RESULT = Code.rem; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // MulopLeft ::= DIV 
            {
              Integer RESULT =null;
		
		 RESULT = Code.div; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // MulopLeft ::= MUL 
            {
              Integer RESULT =null;
		 
		RESULT = Code.mul; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = op;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = op;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // AddopRight ::= MINUS_EQUAL 
            {
              Integer RESULT =null;
		 
		RESULT = Code.sub + codeForEqual;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // AddopRight ::= PLUS_EQUAL 
            {
              Integer RESULT =null;
		 
		RESULT = Code.add + codeForEqual;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AddopLeft ::= MINUS 
            {
              Integer RESULT =null;
		 
		RESULT = Code.sub; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AddopLeft ::= PLUS 
            {
              Integer RESULT =null;
		 
		RESULT = Code.add; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Addop ::= AddopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = op;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = op;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Relop ::= GREATER_EQUALS 
            {
              Integer RESULT =null;
		 
		RESULT = Code.ge; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Relop ::= GREATER 
            {
              Integer RESULT =null;
		 
		RESULT = Code.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Relop ::= LESS_EQUALS 
            {
              Integer RESULT =null;
		
		RESULT = Code.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Relop ::= LESS 
            {
              Integer RESULT =null;
		
		RESULT = Code.lt; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Relop ::= NOT_EQUALS 
            {
              Integer RESULT =null;
		 
		RESULT = Code.ne; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Relop ::= EQUALS 
            {
              Integer RESULT =null;
		
		RESULT = Code.eq; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = op;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = op;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Assignop ::= EQUAL 
            {
              Integer RESULT =null;
		
		RESULT = codeForEqual;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Designator ::= Designator LBRACK error RBRACK 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		RESULT = o; // zbog null exception-a
		log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri indeksiranju niza"); 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		   
		v_call = false;
			   	
		int try_no = 0;
		String s = name;
	   		   		
		do {
			RESULT = Tab.find(s);
			s = "super." + s;
		} while(RESULT  == Tab.noObj && try_no++<10);
	   		   		
		if(RESULT.getKind() == Obj.Fld)
			Code.load(_this);
	   		   		
		log.info("Koriscenje identifikatora " + name + " na liniji " +  nameleft);
	   		   		
		if(RESULT == Tab.noObj)
	   		report_error("Greska na liniji "  + nameleft + ":promenjiva " + name + " ne postoji");
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
		v_call = true;
		this_par = o;
			   		
		// TODO ovde treba da ide provera uslova da li je o instanca klase
		Code.load(o); // adr o na estek za kasnije getfield ili putfield 
			   		
		for(Obj fld : o.getType().getMembers().symbols())
			if(fld.getName().equals(id)) {
				RESULT = fld;
			  	break;
			}
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Designator ::= Designator LBRACK NT$9 Expr RBRACK 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$9 ::= 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

		v_call = false;
			   	   
		if(o.getType() == stringType) {
			Code.load(Tab.find("@@@" + o.getName()));
			RESULT = new Obj(Obj.Elem, "", Tab.charType);
		} else if (o.getType().getKind()==Struct.Array) { 
			Code.load(o); // adr o na estek za kasnije aload ili baload
			RESULT = new Obj(Obj.Elem, "", o.getType().getElemType());
		} else {
			report_error("Greska na liniji "  + oleft + ":tip nije niz");
		}
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		expresionOperand = o;
		isExpresionOperandDesignator = true;

		Code.load(o);

		RESULT = o.getType();
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Factor ::= MethodCall 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		isExpresionOperandDesignator = false;

		RESULT = t;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		isExpresionOperandDesignator = false;

		objCreations++;
		   		
		Code.put(Code.new_);
		Code.put2(currentType.getNumberOfFields()*4);
		   		
		Code.put(Code.putstatic); 
		Code.put2(tmpVarAdr);
		   		
		Code.put(Code.getstatic); 
		Code.put2(tmpVarAdr);
		   		
		Code.loadConst(t.getAdr());
		   		
		Code.put(Code.putfield); 
		Code.put2(0);
		   		
		Code.put(Code.getstatic); 
		Code.put2(tmpVarAdr);
		   		
		RESULT = currentType;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Struct RESULT =null;
		
		isExpresionOperandDesignator = false;		

		Code.put(Code.newarray);
		Code.put(currentType==Tab.charType ? 0 : 1);
		   		
		RESULT = new Struct(Struct.Array, currentType);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		isExpresionOperandDesignator = false;

		RESULT = t;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Factor ::= Const 
            {
              Struct RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj con = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		isExpresionOperandDesignator = false;
 		Code.load(con);
		   		
		RESULT = con.getType();
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = t;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Term ::= Term IsExpresionOperandDesignator ExpresionOperand Mulop Factor 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int isEODleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int isEODright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Boolean isEOD = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj eo = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		isExpresionOperandDesignator = false;

		if(!t1.compatibleWith(t2)) {
			report_error("Nekompatibilni tipovi na liniji " + opleft);
		}
		
		if(!isEOD) {
			report_error("Levom operandu ne moze da se dodeli vrednost na liniji " + opleft);
		}

		if(op > codeForEqual) {
			Code.put(op - codeForEqual);
			Code.store(eo);
			Code.load(eo);
		} else {
			Code.put(op);
		}
		 	
		RESULT = t1;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExpresionOperand ::= 
            {
              Obj RESULT =null;
		
	RESULT = expresionOperand;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpresionOperand",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IsExpresionOperandDesignator ::= 
            {
              Boolean RESULT =null;
		
	RESULT = isExpresionOperandDesignator;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IsExpresionOperandDesignator",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExprPart ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = t;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExprPart ::= ExprPart IsExpresionOperandDesignator ExpresionOperand Addop Term 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int isEODleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int isEODright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Boolean isEOD = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj eo = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		isExpresionOperandDesignator = false;

		if(!t1.compatibleWith(t2)) {
			report_error("Nekompatibilni tipovi na liniji " + opleft);
		}
		
		if(!isEOD) {
			report_error("Levom operandu ne moze da se dodeli vrednost na liniji " + opleft);
		}

		if(op > codeForEqual) {
			Code.put(op - codeForEqual);
			Code.store(eo);
			Code.load(eo);
		} else {
			Code.put(op);
		}
		 		
		RESULT = t1;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expr ::= MINUS ExprPart 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		isExpresionOperandDesignator = false;

		Code.put(Code.neg);
	 		
	 	RESULT = t;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expr ::= ExprPart 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = t;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if(!t1.compatibleWith(t2)) {
			report_error("Nekompatibilni tipovi na liniji " + opleft);
		}
		 		
		Code.putFalseJump(op, 0); // dummy
		fixup_and.push(Code.pc - 2);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CondFact ::= Expr 
            {
              Object RESULT =null;
		
		Code.loadConst(0);
		Code.putFalseJump(Code.ne, 0); // dummy
		fixup_and.push(Code.pc - 2);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CondTermFixed ::= CondTerm 
            {
              Object RESULT =null;
		
		Code.putJump(0); // dummy
		fixup_or.push(Code.pc - 2);
				  	
		while(!fixup_and.empty())
			Code.fixup(fixup_and.pop());
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermFixed",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Condition ::= CondTermFixed 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Condition ::= Condition OR CondTermFixed 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ActPars ::= Expr 
            {
              Stack<Struct> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		RESULT = new Stack<Struct>(); RESULT.push(t);  
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ActPars ::= Expr COMMA ActPars 
            {
              Stack<Struct> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<Struct> ap = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		RESULT = ap; RESULT.push(t);  
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CountMethodCalls ::= 
            {
              Object RESULT =null;
		 
	if(main)  
		mainMethodCalls++; 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountMethodCalls",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MethodSign ::= LPAREN ActPars RPAREN 
            {
              Stack<Struct> RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Stack<Struct> ap = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
		RESULT = ap;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodSign",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MethodSign ::= LPAREN RPAREN 
            {
              Stack<Struct> RESULT =null;
		 
		RESULT = new Stack<Struct>();
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodSign",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VCall ::= 
            {
              Boolean RESULT =null;
		
	RESULT = v_call;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VCall",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MethodCall ::= Designator VCall MethodSign CountMethodCalls 
            {
              Struct RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Stack<Struct> ms = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
		log.info("Poziv metode" + o.getName() + " na liniji " + oleft);
			   		
		if(ms.size() != o.getLevel()) {
			report_error("Ne odgovarajuci br. parametara pri pozivu metode " + o.getName() + " na liniji " + oleft
			   			+ "- Ocekuje se " + o.getLevel() + " parametara, a pozvano je sa " + ms.size());
		}
			   		
		boolean first = true;
		for(Obj param : o.getLocalSymbols()) {
			if(v && first) {
				first = false;
				continue;
			}
			if(ms.empty())
				break;
			if(!ms.pop().assignableTo(param.getType())) {
				report_error("Ne odgovarajuci parametar pri pozivu metode " + o.getName() + " na liniji " + oleft);
			}
		}
			   		
		if(v) {
			Code.load(this_par);
			Code.put(Code.getfield);
			Code.put2(0);
			   	    	
			Code.put(Code.invokevirtual);
			   	    	
			for(int i = 0; i < o.getName().length(); i++)
				Code.put4(o.getName().charAt(i));
							   	
			Code.put4(-1);
		} else {
			int dest_adr = o.getAdr() - Code.pc; // relativna adresa 
			Code.put(Code.call);
			Code.put2(dest_adr);
		}
			   		
		RESULT = o.getType();
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodCall",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DesignatorStatement ::= MethodCall 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		Code.load(o);
		Code.put(Code.const_1);
		Code.put(Code.sub);
		Code.store(o);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		Code.load(o);
		Code.put(Code.const_1);
		Code.put(Code.add);
		Code.store(o);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DesignatorStatement ::= Designator Assignop NT$8 Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if( (o.getType().getKind() != Struct.Class || t.getKind() != Struct.Class) && !t.assignableTo(o.getType())) {
			report_error("Ovaj tip se ne moze dodeliti promenjivoj " + o.getName() + " - Greska na liniji " + oleft);
		}
		
		if(op != codeForEqual)
			Code.put(op - codeForEqual);
			
		Code.store(o);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$8 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

		if(op != codeForEqual)
			Code.load(o);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ConditionFixed ::= Condition DummyJump 
            {
              Object RESULT =null;
		
		while(!fixup_or.empty())
			Code.fixup(fixup_or.pop());
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFixed",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DummyJump ::= 
            {
              Object RESULT =null;
		
	Code.putJump(0); // dummy
	fixup_adr.push(Code.pc - 2);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DummyJump",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DummyJumpEndFix ::= NT$7 DummyJump 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DummyJumpEndFix",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$7 ::= 
            {
              Object RESULT =null;

	Code.pc+=3; 
	Code.fixup(fixup_adr.pop()); 
	Code.pc-=3; 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EndFix ::= 
            {
              Object RESULT =null;
		
	Code.fixup(fixup_adr.pop());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("EndFix",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CountStatementBlocks ::= 
            {
              Object RESULT =null;
		 
	StatementBlocks++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatementBlocks",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CountStatements ::= 
            {
              Object RESULT =null;
		
	if(main)  
		mainStatements++; 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatements",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FixupFor ::= 
            {
              Object RESULT =null;
		
	fixup_for = fixup_adr.peek();
	insideFor = true;

	Code.put(Code.jmp);
	Code.put2(6);

	Code.put(Code.jmp);
	Code.put2(0);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FixupFor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Pc ::= 
            {
              Integer RESULT =null;
		 
	RESULT = Code.pc; 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Pc",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StatementMatched ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		log.debug("Uspesan oporavak od greske na liniji " + eleft); 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StatementMatched ::= OpenScope LBRACE StatementList CloseScope RBRACE CountStatementBlocks 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StatementMatched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
		Code.loadConst(n);
		Code.put(t == Tab.charType ? Code.bprint : Code.print);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StatementMatched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
		Code.put(Code.const_n + 0);
		Code.put(t == Tab.charType ? Code.bprint : Code.print);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StatementMatched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
		Code.put(o.getType() == Tab.charType ? Code.bread : Code.read);
		Code.store(o);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StatementMatched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		Code.put(Code.exit);
		Code.put(Code.return_);
						
		if (currentMethType == Tab.noType)
			report_error("Greska na liniji "+ tleft + ":metod ne sme imati return sa izrazom jer je deklarisan sa void");
		if (!t.assignableTo(currentMethType))
			report_error("Greska na liniji "+ tleft + ":tip izraza nekompatibilan sa deklaracijom metoda");
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StatementMatched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		Code.put(Code.exit);
		Code.put(Code.return_);
						
		if (currentMethType != Tab.noType)
			report_error("Greska na liniji "+ sleft + ":fali return sa izrazom");			
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StatementMatched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if(!insideFor)
			report_error("Greska na liniji "+ sleft + ":continue izvan for petlje!");
		
		Code.putJump(fixup_for + 9);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StatementMatched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if(!insideFor)
			report_error("Greska na liniji "+ sleft + ":break izvan for petlje!");
		
		Code.putJump(fixup_for + 3);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // StatementMatched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StatementMatched ::= FOR LPAREN DesignatorStatement SEMI Pc ConditionFixed FixupFor SEMI Pc DesignatorStatement RPAREN Pc StatementMatched Pc NT$6 EndFix 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int pc1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Integer pc1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int pc2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Integer pc2 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int pc3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pc3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer pc3 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-15)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$6 ::= 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int pc1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Integer pc1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int pc2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer pc2 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pc3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pc3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer pc3 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

		insideFor = false;

		byte[] swp_buf = new byte[pc2 - pc1];

		for(int i = pc1; i < pc2; i++) {
			swp_buf[i - pc1] = Code.buf[i];
		}

		for(int i = pc2; i < pc3; i++) {
			Code.buf[i - pc2 + pc1] = Code.buf[i];
		}

		for(int i = pc3 - pc2 + pc1; i < pc3; i++) {
			Code.buf[i] = swp_buf[i - pc3 + pc2 - pc1];
		}

		continuePosition = pc3 - pc2 + 3;

		Code.buf[pc1 - 2] = (byte)(continuePosition >> 8);
		Code.buf[pc1 - 1] = (byte)continuePosition;

		Code.putJump(pc);  
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StatementMatched ::= IF LPAREN ConditionFixed RPAREN StatementMatched DummyJumpEndFix ELSE StatementMatched EndFix 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // StatementUnmatched ::= FOR LPAREN DesignatorStatement SEMI Pc ConditionFixed FixupFor SEMI Pc DesignatorStatement RPAREN Pc StatementUnmatched Pc NT$5 EndFix 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int pc1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Integer pc1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int pc2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Integer pc2 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int pc3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pc3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer pc3 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-15)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$5 ::= 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int pc1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pc1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Integer pc1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int pc2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer pc2 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pc3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pc3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer pc3 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

		insideFor = false;

		byte[] swp_buf = new byte[pc2 - pc1];

		for(int i = pc1; i < pc2; i++) {
			swp_buf[i - pc1] = Code.buf[i];
		}

		for(int i = pc2; i < pc3; i++) {
			Code.buf[i - pc2 + pc1] = Code.buf[i];
		}

		for(int i = pc3 - pc2 + pc1; i < pc3; i++) {
			Code.buf[i] = swp_buf[i - pc3 + pc2 - pc1];
		}

		continuePosition = pc3 - pc2 + 2;

		Code.buf[pc1 - 2] = (byte)(continuePosition >> 8);
		Code.buf[pc1 - 1] = (byte)continuePosition;

		Code.putJump(pc);  
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StatementUnmatched ::= IF LPAREN ConditionFixed RPAREN StatementMatched DummyJumpEndFix ELSE StatementUnmatched EndFix 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementUnmatched ::= IF LPAREN ConditionFixed RPAREN Statement EndFix 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= StatementMatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= StatementUnmatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		Obj typeNode = RESULT = Tab.find(typeName);
		if (typeNode == Tab.noObj) {
			log.info("Nije pronadjen tip " + typeName + " u tabeli simbola");
			currentType = Tab.noType;
		}
		else {
			if (Obj.Type == typeNode.getKind()) {
				currentType = typeNode.getType();
			}
			else {
				report_error("Greska na liniji" + typeNameleft + ": Ime " + typeName + " ne predstavlja tip ");
				currentType = Tab.noType;
			}
		}
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FormPar ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
		Tab.insert(Obj.Var, name, new Struct(Struct.Array, currentType));
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FormPar ::= Type IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		Tab.insert(Obj.Var, name, currentType);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormPars ::= FormPar 
            {
              Integer RESULT =null;
		 
		RESULT = 1; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormPars ::= FormPars COMMA FormPar 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
		RESULT = n + 1;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MethodLocalVarDeclList ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenjive do {"); 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MethodLocalVarDeclList ::= VarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MethodPars ::= error 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		RESULT = 0;
		log.debug("Uspesan oporavak od greske na liniji " + eleft + " u formalnim parametrima do )"); 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodPars ::= error COMMA FormPars 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		RESULT = n;
		log.debug("Uspesan oporavak od greske na liniji " + eleft + " u formalnim parametrima do ,"); 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodPars ::= 
            {
              Integer RESULT =null;
		
		RESULT = 0;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MethodPars ::= FormPars 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = n;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		currentMethType = currentType;
			   		
		if(inside_class) {
			insideFunc++;
		} else {
			outsideFunc++;
			if (name.equals("main")) {
				main = true;
				Code.mainPc = Code.pc;
				   			
				for(int i = 0; i < pc; i++)
					Code.put(buf[i]);
				   			
				if (!void_meth)
					report_error("Metod main mora biti void");
			}
		}
				   	 
		RESULT = Tab.insert(Obj.Meth, name, void_meth ? Tab.noType : currentType);
		RESULT.setAdr(Code.pc);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodDeclPart ::= MethodName OpenScope NT$2 LPAREN MethodPars RPAREN MethodLocalVarDeclList NT$3 LBRACE StatementList RBRACE NT$4 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
		inside_meth = false; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPart",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

		Tab.chainLocalSymbols(m); 
		if (void_meth) {
			Code.put(Code.exit); 
			Code.put(Code.return_); 
		} else { 
			// postaviti trap funkciju na kraj tela funkcije,
			// da izazove run time grešku ako se zaobiđe return 
			Code.put(Code.trap); 
			Code.put(1);
		}
		main = false; 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

		m.setLevel(n);
		Code.put(Code.enter); 
		Code.put(n + (inside_class ? 1 : 0));
		Code.put(Tab.currentScope().getnVars());
				   		
		/*
			for (Obj var : Tab.currentScope().getLocals().symbols())
				if(var.getAdr() < n)
				   Code.store(var);
		*/	
				   		
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$2 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 
		inside_meth = true; 
					  	
		if(inside_class) {
			_this = Tab.insert(Obj.Var, "this", Tab.noType);
					  		
			for(int i = 0; i < m.getName().length(); i++) {
				loadConst(m.getName().charAt(i));
							   	
				put (Code.putstatic); 
				put2 (VTablePC++);
			}
							
			loadConst (-1); 
						   	
			put (Code.putstatic); 
			put2 (VTablePC++);
						   	
			loadConst (m.getAdr()); 
						   	
			put (Code.putstatic); 
			put2 (VTablePC++);
		}
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodType ::= VOID 
            {
              Object RESULT =null;
		
		void_meth = true;
		currentType = Tab.noType;
 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodType ::= Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodStatic ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStatic",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodStatic ::= STATIC 
            {
              Object RESULT =null;
		
		// TODO
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStatic",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDecl ::= MethodStatic MethodType MethodDeclPart 
            {
              Object RESULT =null;
		
		void_meth = false;
 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassExit ::= NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExit",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$1 ::= 
            {
              Object RESULT =null;

	Tab.chainLocalSymbols(currentClass.getType());
	inside_class = false;
 					
	loadConst(-2);
				   	
	put (Code.putstatic); 
	put2 (VTablePC++);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassBody ::= VarDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassBody ::= VarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassBase ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri nasledjivanju klasa"); 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassBase ::= IDENT 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		RESULT = name;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		log.info("Deklarisana klasa " + name + " na liniji " + nameleft);
		inside_class = true;
		RESULT = currentClass = Tab.insert(Obj.Type, name, new Struct(Struct.Class));
	  	
		currentClass.setAdr(VTablePC); // vTable
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassSignature ::= CLASS ClassName EXTENDS ClassBase OpenScope 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String base = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		Tab.insert(Obj.Fld, "@vtable", Tab.noType);
			  		
		Obj b = Tab.find(base);
				  		
		for(Obj o : b.getType().getMembers().symbols())
			if(!o.getName().equals("@vtable")) {
				Obj n = Tab.insert(o.getKind(), "super." + o.getName(), o.getType());
				n.setAdr(o.getAdr());
			}
			  	
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassSignature",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassSignature ::= CLASS ClassName OpenScope 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		Tab.insert(Obj.Fld, "@vtable", Tab.noType);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassSignature",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= ClassSignature LBRACE ClassBody RBRACE ClassExit 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Var ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
 		if(!inside_class && !inside_meth)
			Code.dataSize++;
		Tab.insert(inside_class && !inside_meth ? Obj.Fld : Obj.Var, name, new Struct(Struct.Array, currentType));  
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if(!inside_class && !inside_meth)
			Code.dataSize++;
		Tab.insert(inside_class && !inside_meth ? Obj.Fld : Obj.Var, name, currentType);  
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		log.debug("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju promenjive"); 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= BOOL 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		RESULT = new Obj(Obj.Con, "", boolType);  
		RESULT.setAdr(val ? 1:0);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= CHAR 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		RESULT = new Obj(Obj.Con, "", Tab.charType);  
		RESULT.setAdr(val);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= NUMBER 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		RESULT = new Obj(Obj.Con, "", Tab.intType);  
		RESULT.setAdr((int)val); // U adr se pamti vrednost konstante
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstListPart ::= IDENT EQUAL Const 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if(Tab.currentScope.findSymbol(name) != null)
	 		report_error("Vec postoji identifikator " + name);
		else {
			Obj con = Tab.insert(Obj.Con, name, currentType);
	  		con.setAdr(o.getAdr());
				  		
			if(o.getType() != currentType)
	  			report_error("Greska u tipu na liniji " + oleft);
		 	}
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstListPart",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstList ::= ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstList ::= ConstList COMMA ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		log.debug("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju konstante"); 
  	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CloseScope ::= 
            {
              Object RESULT =null;
		 
	Tab.closeScope(); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OpenScope ::= 
            {
              Object RESULT =null;
		 
	Tab.openScope(); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
		RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
		log.info("Pocetak programa " + pName + " na liniji " + pNameleft);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROG ProgName OpenScope DeclList LBRACE MethodDeclList NT$0 RBRACE CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		
		Code.dataSize = VTablePC;
				
		int array_count = 0;
		int var_count = 0;
		int con_count = 0;
		int class_count = 0;
				
		for(Obj s : p.getLocalSymbols())
			if(s.getKind() == Obj.Var)
				if(s.getType().getKind() == Struct.Array)
					array_count++;
				else
					var_count++;
			else if(s.getKind() == Obj.Con)
				con_count++;
			else if(s.getKind() == Obj.Type)
				class_count++;
									
		log.info("Broj globalnih prostih promenjivih:" + var_count);
		log.info("Broj globalnih nizova:" + array_count);
		log.info("Broj globalnih konstanti:" + con_count);
		log.info("Broj unutrasnjih klasa:" + class_count);
		log.info("Broj iskaza u main-u:" + mainStatements);
		log.info("Broj poziva metoda u main-u:" + mainMethodCalls);
		log.info("Broj blokova naredbi:" + StatementBlocks);
		log.info("Broj funkcija glavnog programa:" + outsideFunc);
		log.info("Broj funkcija unutrasnjih klasa:" + insideFunc);
		log.info("Broj naredbi kreiranja instanci unutrasnjih klasa:" + objCreations);
		log.info("Broj pristupa clanovima natklase preko kljucne reci super:" + superUsed);	
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

		Tab.chainLocalSymbols(p); 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

